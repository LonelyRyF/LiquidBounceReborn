
buildscript {

    ext.kotlin_version = '1.3.71'

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()

        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url 'https://plugins.gradle.org/m2' }
        maven { url 'https://repo.spongepowered.org/maven' }
    }

    dependencies {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlin_version
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.10"
        classpath "org.spongepowered:mixingradle:0.6-SNAPSHOT"
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '4.0.4'
    }
}

// Languages
apply plugin: 'java'
apply plugin: 'kotlin'

// IDE
apply plugin: 'idea'

// Minecraft
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.mixin"

// Jar packaging
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

sourceSets {
    main.java.srcDirs += 'src/main/java'
    main.resources.srcDirs += 'src/main/resources'
}


compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}



version = "build"
group = "cn.langya"
archivesBaseName = 'FurrySense'

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = 'run'
    mappings = "snapshot_20171003"
    makeObfSourceJar = false
    clientJvmArgs += ["-Dfml.coreMods.load=net.ccbluex.liquidbounce.injection.forge.MixinLoader -Dlog4j.configurationFile=log4j2.xml", "-Xmx1024m -Xms1024m", "-Ddev-mode"]
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.spongepowered.org/maven/' }
}

dependencies {
    compile("org.spongepowered:mixin:0.8") {
        exclude module: "launchwrapper"
    }

    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile 'com.jagrosh:DiscordIPC:0.4'
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version

    compile 'com.squareup.okhttp3:okhttp:4.7.2'
    compile 'com.squareup.okio:okio:2.6.0'

    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.2'
    compile 'com.squareup.retrofit2:converter-gson:2.0.2'

    implementation 'com.github.TheAltening:API-Java-AuthLib:-SNAPSHOT'
    compile 'com.github.TheAltening:API-Java:api-2.0-SNAPSHOT'
    compile 'com.github.TheAltening:API-Java-AuthLib:-SNAPSHOT'

    compile 'com.google.zxing:core:3.5.1'

    compile fileTree(include: ['*.jar'], dir: 'libs')

}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

mixin {
    add sourceSets.main, 'liquidbounce.mixins.refmap.json'
}

jar {
    manifest.attributes(
            'MixinConfigs': 'liquidbounce.forge.mixins.json',
            'tweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': 0,
            'FMLCorePluginContainsFMLMod': 'net.ccbluex.liquidbounce.injection.forge.MixinLoader',
            'FMLCorePlugin': 'net.ccbluex.liquidbounce.injection.forge.TransformerLoader',
            'FMLAT': 'liquidbounce_at.cfg',
            'Manifest-Version': 1.0
    )
}

shadowJar {
    dependencies {
        include(dependency('org.spongepowered:mixin'))
        include(dependency('com.jagrosh:DiscordIPC'))
        include(dependency('org.json:json'))
        include(dependency('org.slf4j:slf4j-api'))
        include(dependency('log4j:log4j:1.2.17'))
        include(dependency('org.scijava:native-lib-loader'))
        include(dependency('com.kohlschutter.junixsocket:junixsocket-common'))
        include(dependency('com.kohlschutter.junixsocket:junixsocket-native-common'))

        include(dependency('org.jetbrains.kotlin:kotlin-stdlib'))

        include(dependency('com.squareup.okhttp3:okhttp'))
        include(dependency('com.squareup.okio:okio'))
        include(dependency('com.squareup.retrofit2:adapter-rxjava'))
        include(dependency('com.squareup.retrofit2:converter-gson'))

        include(dependency('com.github.TheAltening:API-Java'))
        include(dependency('com.github.TheAltening:API-Java-AuthLib'))
    }

    exclude 'dummyThing'
    exclude 'LICENSE.txt'

    classifier = ''
}

reobf {
    shadowJar { mappingType = 'SEARGE' }
}
tasks.reobfShadowJar.mustRunAfter shadowJar

configurations {
    external
    compile.extendsFrom external
}

build.dependsOn shadowJar